apiVersion: v1
data:
  config.json: |-
    {
      "version": "26",
      "credential": {
        "accessKey": "spinnakeradmin",
        "secretKey": "spinnakeradmin"
      },
      "region": "us-east-1",
      "browser": "on",
      "worm": "off",
      "domain": "",
      "storageclass": {
        "standard": "",
        "rrs": ""
      },
      "cache": {
        "drives": [],
        "expiry": 90,
        "maxuse": 80,
        "exclude": []
      },
      "notify": {
        "amqp": {
          "1": {
            "enable": false,
            "url": "",
            "exchange": "",
            "routingKey": "",
            "exchangeType": "",
            "deliveryMode": 0,
            "mandatory": false,
            "immediate": false,
            "durable": false,
            "internal": false,
            "noWait": false,
            "autoDeleted": false
          }
        },
        "nats": {
          "1": {
            "enable": false,
            "address": "",
            "subject": "",
            "username": "",
            "password": "",
            "token": "",
            "secure": false,
            "pingInterval": 0,
            "streaming": {
              "enable": false,
              "clusterID": "",
              "clientID": "",
              "async": false,
              "maxPubAcksInflight": 0
            }
          }
        },
        "elasticsearch": {
          "1": {
            "enable": false,
            "format": "namespace",
            "url": "",
            "index": ""
          }
        },
        "redis": {
          "1": {
            "enable": false,
            "format": "namespace",
            "address": "",
            "password": "",
            "key": ""
          }
        },
        "postgresql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "connectionString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "kafka": {
          "1": {
            "enable": false,
            "brokers": null,
            "topic": ""
          }
        },
        "webhook": {
          "1": {
            "enable": false,
            "endpoint": ""
          }
        },
        "mysql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "dsnString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "mqtt": {
          "1": {
            "enable": false,
            "broker": "",
            "topic": "",
            "qos": 0,
            "clientId": "",
            "username": "",
            "password": "",
            "reconnectInterval": 0,
            "keepAliveInterval": 0
          }
        }
      }
    }
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.

    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: http://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="mc config host add myminio http://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }

    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3

      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          /usr/bin/mc rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi

      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        /usr/bin/mc mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi

      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      /usr/bin/mc policy $POLICY myminio/$BUCKET
    }

    # Try connecting to Minio instance
    connectToMinio
    # Create the bucket
    createBucket bucket none false
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"config.json":"{\n  \"version\": \"26\",\n  \"credential\": {\n    \"accessKey\": \"spinnakeradmin\",\n    \"secretKey\": \"spinnakeradmin\"\n  },\n  \"region\": \"us-east-1\",\n  \"browser\": \"on\",\n  \"worm\": \"off\",\n  \"domain\": \"\",\n  \"storageclass\": {\n    \"standard\": \"\",\n    \"rrs\": \"\"\n  },\n  \"cache\": {\n    \"drives\": [],\n    \"expiry\": 90,\n    \"maxuse\": 80,\n    \"exclude\": []\n  },\n  \"notify\": {\n    \"amqp\": {\n      \"1\": {\n        \"enable\": false,\n        \"url\": \"\",\n        \"exchange\": \"\",\n        \"routingKey\": \"\",\n        \"exchangeType\": \"\",\n        \"deliveryMode\": 0,\n        \"mandatory\": false,\n        \"immediate\": false,\n        \"durable\": false,\n        \"internal\": false,\n        \"noWait\": false,\n        \"autoDeleted\": false\n      }\n    },\n    \"nats\": {\n      \"1\": {\n        \"enable\": false,\n        \"address\": \"\",\n        \"subject\": \"\",\n        \"username\": \"\",\n        \"password\": \"\",\n        \"token\": \"\",\n        \"secure\": false,\n        \"pingInterval\": 0,\n        \"streaming\": {\n          \"enable\": false,\n          \"clusterID\": \"\",\n          \"clientID\": \"\",\n          \"async\": false,\n          \"maxPubAcksInflight\": 0\n        }\n      }\n    },\n    \"elasticsearch\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"url\": \"\",\n        \"index\": \"\"\n      }\n    },\n    \"redis\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"address\": \"\",\n        \"password\": \"\",\n        \"key\": \"\"\n      }\n    },\n    \"postgresql\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"connectionString\": \"\",\n        \"table\": \"\",\n        \"host\": \"\",\n        \"port\": \"\",\n        \"user\": \"\",\n        \"password\": \"\",\n        \"database\": \"\"\n      }\n    },\n    \"kafka\": {\n      \"1\": {\n        \"enable\": false,\n        \"brokers\": null,\n        \"topic\": \"\"\n      }\n    },\n    \"webhook\": {\n      \"1\": {\n        \"enable\": false,\n        \"endpoint\": \"\"\n      }\n    },\n    \"mysql\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"dsnString\": \"\",\n        \"table\": \"\",\n        \"host\": \"\",\n        \"port\": \"\",\n        \"user\": \"\",\n        \"password\": \"\",\n        \"database\": \"\"\n      }\n    },\n    \"mqtt\": {\n      \"1\": {\n        \"enable\": false,\n        \"broker\": \"\",\n        \"topic\": \"\",\n        \"qos\": 0,\n        \"clientId\": \"\",\n        \"username\": \"\",\n        \"password\": \"\",\n        \"reconnectInterval\": 0,\n        \"keepAliveInterval\": 0\n      }\n    }\n  }\n}","initialize":"#!/bin/sh\nset -e ; # Have script exit in the event of a failed command.\n\n# connectToMinio\n# Use a check-sleep-check loop to wait for Minio service to be available\nconnectToMinio() {\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to Minio server: http://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"mc config host add myminio http://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n\n# checkBucketExists ($bucket)\n# Check if the bucket exists, by using the exit code of `mc ls`\ncheckBucketExists() {\n  BUCKET=$1\n  CMD=$(/usr/bin/mc ls myminio/$BUCKET \u003e /dev/null 2\u003e\u00261)\n  return $?\n}\n\n# createBucket ($bucket, $policy, $purge)\n# Ensure bucket exists, purging if asked to\ncreateBucket() {\n  BUCKET=$1\n  POLICY=$2\n  PURGE=$3\n\n  # Purge the bucket, if set \u0026 exists\n  # Since PURGE is user input, check explicitly for `true`\n  if [ $PURGE = true ]; then\n    if checkBucketExists $BUCKET ; then\n      echo \"Purging bucket '$BUCKET'.\"\n      set +e ; # don't exit if this fails\n      /usr/bin/mc rm -r --force myminio/$BUCKET\n      set -e ; # reset `e` as active\n    else\n      echo \"Bucket '$BUCKET' does not exist, skipping purge.\"\n    fi\n  fi\n\n  # Create the bucket if it does not exist\n  if ! checkBucketExists $BUCKET ; then\n    echo \"Creating bucket '$BUCKET'\"\n    /usr/bin/mc mb myminio/$BUCKET\n  else\n    echo \"Bucket '$BUCKET' already exists.\"\n  fi\n\n  # At this point, the bucket should exist, skip checking for existence\n  # Set policy on the bucket\n  echo \"Setting policy of bucket '$BUCKET' to '$POLICY'.\"\n  /usr/bin/mc policy $POLICY myminio/$BUCKET\n}\n\n# Try connecting to Minio instance\nconnectToMinio\n# Create the bucket\ncreateBucket bucket none false"},"kind":"ConfigMap","metadata":{"annotations":{},"creationTimestamp":"2019-05-13T14:37:04Z","labels":{"app":"minio","chart":"minio-1.6.3","heritage":"Tiller","release":"spinnaker"},"name":"spinnaker-minio","namespace":"default","resourceVersion":"2510122","selfLink":"/api/v1/namespaces/default/configmaps/spinnaker-minio","uid":"93dd3d25-758c-11e9-a929-00505699e9e3"}}
  creationTimestamp: "2019-08-19T10:27:38Z"
  labels:
    app: minio
    chart: minio-1.6.3
    heritage: Tiller
    release: spinnaker
  name: spinnaker-minio
  namespace: default
